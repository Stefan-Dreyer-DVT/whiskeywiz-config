openapi: 3.0.3
info:
  title: WhiskeyWiz
  description: |-
    WhiskeyWiz is a sophisticated and engaging platform dedicated to whiskey enthusiasts. 
    The project aims to provide users with an educational and interactive experience to explore
    various whiskey types, tasting notes, reviews, and ratings. It also allows users to manage 
    their whiskey collections, participate in tasting events, and connect with a community of 
    fellow whiskey lovers.
  version: 1.0.0-SNAPSHOT
servers:
  - url: http:localhost:8080/
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new User
      description: Add a new User
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successfully added User
        '400':
          description: Bad Request, failed to add item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '500':
          description: Server error, failed to add item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
  /users/{id}:
    get:
      tags:
        - user
      summary: Get specific User
      description: Get specific User
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Whiskey Not found
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '500':
          description: Server error, failed to get item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    put:
      tags:
        - user
      summary: Update User
      description: Update User
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: successful operations
        '400':
          description: Bad Request, failed to update item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '404':
          description: Not Found, failed to update item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '500':
          description: Server error, failed to update item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    delete:
      tags:
        - user
      summary: removes user
      description: removes user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: successfully removed User
        '404':
          description: Not Found, failed to remove item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '500':
          description: Server error, failed to remove item
          content:
            application/problem+json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        email:
          type: string
          example: Stefan@email.com
        name:
          type: string
          example: Stefan

  requestBodies:
    User:
      description: User Schema request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      required: true

  parameters:
    id:
      name: id
      in: path
      description: unique Identifying ID of the object
      required: true
      schema:
        type: integer
        format: int64